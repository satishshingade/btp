/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var location = 
    /* color: #fcff0a */
    /* displayProperties: [
      {
        "type": "polygon"
      },
      {
        "type": "polygon"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[87.76612554675451, 24.15676943925097],
                  [87.76569639331213, 24.155692611408448],
                  [87.76661907321325, 24.15483114259923],
                  [87.76721988803259, 24.155692611408448],
                  [87.76706968432775, 24.156417023865345],
                  [87.76666198855749, 24.156162501037766]]]),
            {
              "class": 1,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[87.8614615756291, 24.080855646393122],
                  [87.86189072907148, 24.080365889883],
                  [87.86219113648114, 24.081188679751307]]]),
            {
              "class": 1,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[87.31677576750128, 22.315360439675363],
                  [87.31677576750128, 22.314586261663536],
                  [87.31809809654563, 22.314586261663536],
                  [87.31809809654563, 22.315360439675363]]], null, false),
            {
              "class": 1,
              "system:index": "2"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// var dist = districts.filter(ee.Filter.eq('DISTNAME', 'Birbhum'));

var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filterDate('2021-06-01', '2021-06-15')
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.or((ee.Filter.eq('orbitProperties_pass', 'ASCENDING'), ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))))
                    .filterBounds(location);
print(sentinel1);
                    
/*
var sentinel2 = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filterDate('2021-06-16', '2021-06-30')
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.or((ee.Filter.eq('orbitProperties_pass', 'ASCENDING'), ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))))
                     .filterBounds(dist);
var sentinel3 = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filterDate('2021-07-01', '2021-07-15')
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.or((ee.Filter.eq('orbitProperties_pass', 'ASCENDING'), ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))))
                     .filterBounds(dist);
var sentinel4 = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filterDate('2021-07-16', '2021-07-31')
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.or((ee.Filter.eq('orbitProperties_pass', 'ASCENDING'), ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))))
                     .filterBounds(dist);
                    
var sentinel5 = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filterDate('2021-08-01', '2021-08-15')
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.or((ee.Filter.eq('orbitProperties_pass', 'ASCENDING'), ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))))
                     .filterBounds(dist);
var sentinel6 = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filterDate('2021-08-16', '2021-08-31')
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.or((ee.Filter.eq('orbitProperties_pass', 'ASCENDING'), ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))))
                     .filterBounds(dist);   
var sentinel7 = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filterDate('2021-09-01', '2021-09-15')
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.or((ee.Filter.eq('orbitProperties_pass', 'ASCENDING'), ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))))
                     .filterBounds(dist); 
var sentinel8 = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filterDate('2021-09-16', '2021-09-30')
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.or((ee.Filter.eq('orbitProperties_pass', 'ASCENDING'), ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))))
                    .filterBounds(dist);  
var sentinel9 = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filterDate('2021-10-01', '2021-10-15')
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.or((ee.Filter.eq('orbitProperties_pass', 'ASCENDING'), ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))))
                    .filterBounds(dist);
var sentinel10 = ee.ImageCollection('COPERNICUS/S1_GRD')
                    .filterDate('2021-10-16', '2021-10-31')
                    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                    .filter(ee.Filter.eq('instrumentMode', 'IW'))
                    .filter(ee.Filter.or((ee.Filter.eq('orbitProperties_pass', 'ASCENDING'), ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))))
                    .filterBounds(dist);
                    
var image1 = sentinel1.select('VH').mean().rename('VH1');
var image2 = sentinel2.select('VH').mean().rename('VH2');
var image3 = sentinel3.select('VH').mean().rename('VH3');
var image4 = sentinel4.select('VH').mean().rename('VH4');
var image5 = sentinel5.select('VH').mean().rename('VH5');
var image6 = sentinel6.select('VH').mean().rename('VH6');
var image7 = sentinel7.select('VH').mean().rename('VH7');
var image8 = sentinel8.select('VH').mean().rename('VH8');
var image9 = sentinel9.select('VH').mean().rename('VH9');
var image10 = sentinel10.select('VH').mean().rename('VH10');

var stacked = image1.addBands([image2,image3,image4,image5,image6,image7,image8,image9,image10]).clip(dist);
print(stacked);

var stacked_scaled = stacked.multiply(10).add(350).uint8();
var bands = ['VH2', 'VH4', 'VH9'];
var display = {bands: bands, min: 0, max: 220};
Map.addLayer(stacked_scaled, display, 'stacked');

var collection = ee.ImageCollection('COPERNICUS/S2_SR') 
                   .filterDate('2021-09-25', '2021-11-05')
                   .filterBounds(dist);
var im = collection.median().clip(dist);
var S2_bands = ['B8', 'B4', 'B3'];
var S2_display = {bands: S2_bands, min: 0, max: 4000};
Map.addLayer(im, S2_display, 'im');
Map.setCenter(87.61,23.84,8);

var gt1 =  rice1.merge(rice2).merge(rice3).merge(rice4).merge(rice5).merge(urban).merge(water).merge(other);

var training = stacked_scaled.sampleRegions({
  collection: gt1,
  properties: ['class'],
  scale: 10
});
// Make a Random Forest classifier and train it.
var classifier = ee.Classifier.smileRandomForest(10)
    .train({
      features: training,
      classProperty: 'class',
      
    });
var classified = stacked_scaled.classify(classifier);

var masked = classified.updateMask(classified.lt(6));

Map.addLayer(masked,
             {min: 1, max:5 , palette: ['yellow','yellow','yellow','yellow','yellow' ]},
             'classification');

var areaImage = ee.Image.pixelArea().addBands(masked);
var areas = areaImage.reduceRegion({
  reducer: ee.Reducer.sum().group({
    groupField: 1,
    groupName: 'class',
  }),
  geometry: dist,
  scale: 10,
  maxPixels: 1e13,
  //tileScale: 8
});

// Print the area calculations.
print('##### CLASS AREA SQ. METERS #####');
print(areas);

// Get a confusion matrix representing resubstitution accuracy.
var trainAccuracy = classifier.confusionMatrix();
print('Resubstitution error matrix: ', trainAccuracy);
print('Training overall accuracy: ', trainAccuracy.accuracy());

// Sample the input with a different random seed to get validation data.
var validation = stacked_scaled.sampleRegions({
  collection: gt1,
  properties: ['class'],
  scale: 10
});

// Classify the validation data.
var validated = validation.classify(classifier);

// Get a confusion matrix representing expected accuracy.
var testAccuracy = validated.errorMatrix('class', 'classification');
print('Validation error matrix: ', testAccuracy);
print('Validation overall accuracy: ', testAccuracy.accuracy());
          
var bandInfo = {
  'VH1': {v: 1, f: 'June_1FN'},
  'VH2': {v: 2, f: 'June_2FN'},
  'VH3': {v: 3, f: 'July_1FN'},
  'VH4': {v: 4, f: 'July_2FN'},
  'VH5': {v: 5, f: 'Aug_1FN'},
  'VH6': {v: 6, f: 'Aug_2FN'},
  'VH7': {v: 7, f: 'Sep_1FN'},
  'VH8': {v: 8, f: 'Sep_2FN'},
  'VH9': {v: 9, f: 'Oct_1FN'},
  'VH10': {v: 10, f: 'Oct_2FN'}

  
};

var xPropVals = [];    // List to codify x-axis band names as values.
var xPropLabels = [];  // Holds dictionaries that label codified x-axis values.
for (var key in bandInfo) {
  xPropVals.push(bandInfo[key].v);
  xPropLabels.push(bandInfo[key]);
}
var regionsBand =
    gt1
        .reduceToImage({properties: ['class'], reducer: ee.Reducer.first()})
         .rename('class');

var sentinelSrClass = stacked_scaled.addBands(regionsBand);
       // print(sentinelSrClass);
var chart = ui.Chart.image
                .byClass({
                  image: sentinelSrClass,
                  classBand: 'class',
                  region: gt1,
                  reducer: ee.Reducer.mean(),
                  scale: 10,
                //  classLabels: ['Mustard', 'Wheat'],
                  xLabels: xPropVals
                })
                .setChartType('ScatterChart')
                .setOptions({
                  title: 'Temporal Signatures - Backscatter',
                  hAxis: {
                    title: 'Dates',
                    titleTextStyle: {italic: false, bold: true},
                    viewWindow: {min: bands[0], max: bands[9]},
                    ticks: xPropLabels
                  },
                  vAxis: {
                    title: 'Backscatter(Scaled)',
                    titleTextStyle: {italic: false, bold: true},
                    viewWindow: {min: 0, max: 250},
                  },
                  colors: ['red', 'blue', 'grey', 'green', 'yellow', 'magenta', 'cyan', 'green'],
                  pointSize: 0,
                  lineSize: 2,
                  curveType: 'function'
                });
print(chart);     
        
*/